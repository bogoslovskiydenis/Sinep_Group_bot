import {
    doc,
    setDoc,
    getDoc,
    updateDoc,
    serverTimestamp
} from 'firebase/firestore';
import { db } from '../config/firebase.js';

console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserService...');

class UserService {
    constructor() {
        this.usersCollection = 'users';

        if (!db) {
            console.error('‚ùå Firebase DB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ UserService');
            throw new Error('Firebase DB –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        console.log('‚úÖ UserService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        this.validateMethods();
    }

    validateMethods() {
        const methods = ['saveUser', 'getUser', 'updateUserLanguage', 'saveUserContact', 'saveOrder', 'getUserOrders', 'getStats'];

        for (const method of methods) {
            if (typeof this[method] !== 'function') {
                console.error(`–ú–µ—Ç–æ–¥ ${method} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ UserService`);
            } else {
                console.log(`–ú–µ—Ç–æ–¥ ${method} –¥–æ—Å—Ç—É–ø–µ–Ω`);
            }
        }
    }

    async saveUser(userData) {
        console.log('saveUser –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', userData);
        try {
            const userRef = doc(db, this.usersCollection, userData.id.toString());

            const userDoc = {
                id: userData.id,
                username: userData.username || null,
                first_name: userData.first_name,
                language: null,
                phone_number: null,
                created_at: serverTimestamp(),

                last_service: null,
                last_service_name: null,
                last_budget: null,
                last_order_at: null,
                orders_count: 0
            };

            await setDoc(userRef, userDoc, { merge: true });

            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.first_name} (${userData.id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firebase`);
            return { success: true, data: userDoc };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            return { success: false, error: error.message };
        }
    }



    async updateUserLanguage(userId, language) {
        console.log('updateUserLanguage –≤—ã–∑–≤–∞–Ω:', { userId, language });
        try {
            const userRef = doc(db, this.usersCollection, userId.toString());

            await updateDoc(userRef, {
                language: language
            });

            console.log(`–Ø–∑—ã–∫ ${language} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return { success: true };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞:', error.message);
            return { success: false, error: error.message };
        }
    }

    async saveUserContact(contactData) {
        console.log('saveUserContact –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', contactData);
        try {
            const userRef = doc(db, this.usersCollection, contactData.userId.toString());
            await updateDoc(userRef, {
                phone_number: contactData.phoneNumber || null,
            });

            console.log(`–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${contactData.userId}`);
            return { success: true };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error.message);
            return { success: false, error: error.message };
        }
    }

    async saveOrder(orderData) {
        console.log('saveOrder –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', orderData);
        try {
            console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${orderData.userId}:`, orderData);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if (!orderData.userId) {
                throw new Error('userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞');
            }

            const userRef = doc(db, this.usersCollection, orderData.userId.toString());

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userSnap = await getDoc(userRef);
            const currentData = userSnap.exists() ? userSnap.data() : {};
            const currentOrdersCount = currentData.orders_count || 0;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—Å–ª—É–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let updatedServiceName = orderData.serviceName || '';

            if (currentData.last_service_name) {
                const existingServices = currentData.last_service_name.split(' | ');

                if (!existingServices.includes(orderData.serviceName)) {
                    updatedServiceName = currentData.last_service_name + ' | ' + orderData.serviceName;
                } else {
                    updatedServiceName = currentData.last_service_name;
                }
            }

            const orderUpdateData = {
                last_service: orderData.service || null,
                last_service_name: updatedServiceName,
                last_budget: orderData.budget || null,
                last_order_at: serverTimestamp(),
                orders_count: currentOrdersCount + 1,
                last_order_timestamp: orderData.timestamp || new Date().toISOString()
            };

            console.log('üßπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', orderUpdateData);

            await updateDoc(userRef, orderUpdateData);

            console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${orderData.userId}`);
            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏: ${updatedServiceName}`);
            return { success: true, orderId: `${orderData.userId}_${Date.now()}` };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error.message);
            console.error('Stack trace:', error.stack);
            return { success: false, error: error.message };
        }
    }
}

export default UserService;